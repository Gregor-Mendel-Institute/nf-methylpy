/*
 * -------------------------------------------------
 *  Methylpy Nextflow config file
 * -------------------------------------------------
 * This file contains basic process requirement setup
 * It DOES NOT contain any config for cluster, so will run
 * in default mode by itself. It should be used with
 * the max_memory, max_cpus and max_time params for
 * customising hardware limits
 */


process {

  container = params.container

  cpus = { check_max( 1 * task.attempt, 'cpus') }
  memory = { check_max( 8.GB * task.attempt, 'memory') }
  time = { check_max( 2.h * task.attempt, 'time') }

  errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'terminate' }
  maxRetries = 3
  maxErrors = '-1'

  //module = ['methylpy/1.1.9-foss-2017a-Python-2.7.13']
  module = ['methylpy/1.2.9-foss-2017a-Python-2.7.13']

  $identify_libraries {
    module = ['sratoolkit/2.8.1-3', 'SAMtools/1.6-foss-2017a']
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 10.GB * task.attempt, 'memory') }
    time = { check_max( 1.h * task.attempt, 'time') }
  }

  $reads_preprocess {
    module = ['sratoolkit/2.8.1-3','methylpy/1.2.9-foss-2017a-Python-2.7.13']
    // picard tools are already loaded in the methylpy package.
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 10.GB * task.attempt, 'memory') }
    time = { check_max( 10.h * task.attempt, 'time') }
  }

  $makeMethylpyIndex {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 10.GB * task.attempt, 'memory') }
    time = { check_max( 10.h * task.attempt, 'time') }
  }

  $methylpy_align {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 80.GB * task.attempt, 'memory') }
    time = { check_max( 1.d * task.attempt, 'time') }
  }

  $add_readgroups {
    module = ['picard/2.6.0-Java-1.8.0_131', 'SAMtools/1.6-foss-2017a']
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 11.GB * task.attempt, 'memory') }
    time = { check_max( 1.d * task.attempt, 'time') }
  }

  $do_realignindel {
    module = ['GATK/3.7-Java-1.8.0_112', 'SAMtools/1.6-foss-2017a']
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 11.GB * task.attempt, 'memory') }
    time = { check_max( 1.d * task.attempt, 'time') }
  }

  $do_snpcall {
    module = ['GATK/3.7-Java-1.8.0_112', 'SAMtools/1.6-foss-2017a']
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 80.GB * task.attempt, 'memory') }
    time = { check_max( 1.d * task.attempt, 'time') }
  }

  $get_snps_from_vcf {
    module = ['BCFtools/1.3-foss-2015b']
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 10.GB * task.attempt, 'memory') }
    time = { check_max( 10.h * task.attempt, 'time') }
  }
}

params {
  aligner = "methylpy"
}
