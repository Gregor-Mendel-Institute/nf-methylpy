/*
 * -------------------------------------------------
 *  Base Nextflow config file
 * -------------------------------------------------
 * This file contains basic process requirement setup
 * It DOES NOT contain any config for cluster, so will run
 * in default mode by itself. It should be used with
 * the max_memory, max_cpus and max_time params for
 * customising hardware limits
 */

process {

  container = params.container

  cpus = { check_max( 1 * task.attempt, 'cpus') }
  memory = { check_max( 8.GB * task.attempt, 'memory') }
  time = { check_max( 2.h * task.attempt, 'time') }

  errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'terminate' }
  maxRetries = 3
  maxErrors = '-1'

  // Resource requirements
  $makeBismarkIndex {
    module = ['Bismark/0.18.1-foss-2016a']
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  $fastqc {
    module = ['FastQC/0.11.5-foss-2016a']
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  $trim_galore {
    module = ['Trim_Galore/0.4.1-foss-2016a']
    cpus = { check_max( 2 * task.attempt, 'cpus') }
    memory = { check_max( 20.GB * task.attempt, 'memory') }
    time = { check_max( 1.d * task.attempt, 'time') }
  }
  $bismark_align {
    module = ['Bismark/0.18.1-foss-2016a']
    cpus = { check_max( 12 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 8.d * task.attempt, 'time') }
  }
  $bismark_deduplicate {
    module = ['Bismark/0.18.1-foss-2016a']
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 2.d * task.attempt, 'time') }
  }
  $bismark_methXtract {
    module = ['Bismark/0.18.1-foss-2016a']
    cpus = { check_max( 12 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 1.d * task.attempt, 'time') }
  }
  $bismark_report {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  $bismark_summary {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  $qualimap {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 6.h * task.attempt, 'time') }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  $get_software_versions {
    validExitStatus = [0,1]
    executor = 'local'
    errorStrategy = 'ignore'
  }
  $multiqc {
    executor = 'local'
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }

  $bwamem_align {
    module = ['BWA/0.7.15-foss-2016a']
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 6.d * task.attempt, 'time') }
  }
  $samtools_sort_index_flagstat {
    module = ['SAMtools/1.6-foss-2017a']
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 1.d * task.attempt, 'time') }
  }
  $markDuplicates {
    module = ['picard/2.3.0','SAMtools/1.6-foss-2017a']
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 2.d * task.attempt, 'time') }
  }
  $methyldackel {
    cpus = { check_max( 6 * task.attempt, 'cpus') }
    memory = { check_max( 48.GB * task.attempt, 'memory') }
    time = { check_max( 1.d * task.attempt, 'time') }
  }
}
